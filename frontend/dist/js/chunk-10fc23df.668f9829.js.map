{"version":3,"sources":["webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/themes/kelly.js","webpack:///./node_modules/@amcharts/amcharts4/themes/kelly.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Colors.js"],"names":["Color","color","this","_value","Object","defineProperty","prototype","get","enumerable","configurable","a","set","value","_lightColor","r","g","b","_darkColor","toString","alpha","rgba","hex","lighten","percent","rgb","brighten","saturate","saturation","darkColor","lightColor","Error","undefined","cacheId","cached","getCache","setCache","isColor","castColor","toColor","theme","object","list","minLightness","maxLightness","reuse","namedColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","charAt","hexToRgb","match","rgbaToRgb","shorthandRegex","replace","m","result","exec","parseInt","matches","push","parseFloat","rgbToHex","pad2","rgbToRGBA","c","length","interpolate","rgb1","rgb2","Math","round","max","min","getLightnessStep","base","step","getBrightnessStep","hsl","rgbToHsl","s","hslToRgb","h","l","hue2rgb","p","q","t","d","rgbToHsv","v","hsvToRgb","i","floor","f","isLight"],"mappings":"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","file":"js/chunk-10fc23df.668f9829.js","sourcesContent":["/**\r\n * This module contains Color object definition\r\n */\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Represents a color.\r\n *\r\n * `Color` accepts value only in [[iRGB]] object format. To create `Color`\r\n * object by parsing it from any supported string-based formats, use helper\r\n * [[color]] function:\r\n *\r\n * ```TypeScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar Color = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param color Source color\r\n     */\r\n    function Color(color) {\r\n        this._value = color;\r\n    }\r\n    Object.defineProperty(Color.prototype, \"rgb\", {\r\n        /**\r\n         * Returns [[iRGB]] representation of the color.\r\n         *\r\n         * @return RGB object\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"hex\", {\r\n        /**\r\n         * Returns color hex value string, e.g. \"#FF0000\".\r\n         *\r\n         * @return Hex color code\r\n         */\r\n        get: function () {\r\n            return this._value ? $colors.rgbToHex(this._value) : \"none\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"rgba\", {\r\n        /**\r\n         * Returns an `rgba()` representation of the color, e.g.:\r\n         * `rgba(255, 0, 0, 0.5)`.\r\n         *\r\n         * @return rgba color string\r\n         */\r\n        get: function () {\r\n            return this._value ? $colors.rgbToRGBA(this._value) : \"none\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"alpha\", {\r\n        /**\r\n         * Returns current transparency.\r\n         *\r\n         * @return Alpha (0-1)\r\n         */\r\n        get: function () {\r\n            if (this._value != null && this._value.a != null) {\r\n                return this._value.a;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        },\r\n        /**\r\n         * Set alpha (transparency) of the color.\r\n         *\r\n         * @param value Alpha (0-1)\r\n         */\r\n        set: function (value) {\r\n            if (this._value) {\r\n                this._value.a = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"lightColor\", {\r\n        /**\r\n         * Returns current light color setting.\r\n         *\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            if (!this._lightColor) {\r\n                this._lightColor = new Color({ r: 255, g: 255, b: 255 });\r\n            }\r\n            return this._lightColor;\r\n        },\r\n        /**\r\n         * Sets \"light\" color. Used when determining contrasting color.\r\n         *\r\n         * @param color Color\r\n         */\r\n        set: function (color) {\r\n            this._lightColor = color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"darkColor\", {\r\n        /**\r\n         * Returns current dark color setting.\r\n         *\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            if (!this._darkColor) {\r\n                this._darkColor = new Color({ r: 0, g: 0, b: 0 });\r\n            }\r\n            return this._darkColor;\r\n        },\r\n        /**\r\n         * Sets \"dark\" color. Used when determining contrasting color.\r\n         *\r\n         * @param color Color\r\n         */\r\n        set: function (color) {\r\n            this._darkColor = color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Overrides `toString` method so that [[Color]] object can be used as\r\n     * string.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return String represantion of color (usable in CSS)\r\n     */\r\n    Color.prototype.toString = function () {\r\n        return this.alpha < 1 ? this.rgba : this.hex;\r\n    };\r\n    /**\r\n     * Returns a new [[Color]] which is percent lighter (positive value),\r\n     * or darker (negative value).\r\n     *\r\n     * Parameter is in the scale of -1 to 1.\r\n     *\r\n     * @param percent  Increase/decrease lightness by X\r\n     * @return New Color\r\n     */\r\n    Color.prototype.lighten = function (percent) {\r\n        return new Color($colors.lighten(this.rgb, percent));\r\n    };\r\n    /**\r\n     * Returns a new [[Color]] which is percent brighter (positive value),\r\n     * or darker (negative value).\r\n     *\r\n     * Parameter is in the scale of -1 to 1.\r\n     *\r\n     * @param percent  Increase/decrease brightness by X\r\n     * @return New Color\r\n     */\r\n    Color.prototype.brighten = function (percent) {\r\n        return new Color($colors.brighten(this.rgb, percent));\r\n    };\r\n    /**\r\n     * Returns a new [[Color]] based on current color with specific saturation\r\n     * applied.\r\n     *\r\n     * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n     * saturated).\r\n     *\r\n     * @param saturation  Saturation (0-1)\r\n     * @return New (saturated) color\r\n     */\r\n    Color.prototype.saturate = function (saturation) {\r\n        return new Color($colors.saturate(this.rgb, saturation));\r\n    };\r\n    Object.defineProperty(Color.prototype, \"alternative\", {\r\n        /**\r\n         * Returns a either light or dark color that contrasts specifically with\r\n         * this color.\r\n         *\r\n         * Uses properties `darkColor` (default black) and `lightColor` (default\r\n         * white).\r\n         *\r\n         * Useful when determining which color label should be on a colored\r\n         * background, so that it stands out.\r\n         *\r\n         * @return Contrasting color\r\n         */\r\n        get: function () {\r\n            if (this.rgb != null) {\r\n                return $colors.isLight(this.rgb) ? this.darkColor : this.lightColor;\r\n            }\r\n            else {\r\n                throw new Error(\"Color does not exist\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Color;\r\n}());\r\nexport { Color };\r\n/**\r\n * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]\r\n * object for it.\r\n *\r\n * @param value  Input value\r\n * @param alpha  Alpha (0-1)\r\n * @return Color object\r\n */\r\nexport function color(value, alpha) {\r\n    if (!$type.hasValue(value)) {\r\n        return new Color(undefined);\r\n    }\r\n    if (typeof value == \"string\") {\r\n        var cacheId = \"_color_\" + value + \"_\" + (alpha || \"1\");\r\n        var cached = registry.getCache(cacheId);\r\n        if (cached) {\r\n            return new Color({\r\n                r: cached.r,\r\n                g: cached.g,\r\n                b: cached.b,\r\n                a: cached.a\r\n            });\r\n        }\r\n        var rgb = $colors.rgb(value, alpha);\r\n        registry.setCache(cacheId, rgb);\r\n        return new Color(rgb);\r\n    }\r\n    // Check if it's already a Color object\r\n    if (value instanceof Color) {\r\n        if ($type.hasValue(alpha)) {\r\n            value.alpha = alpha;\r\n        }\r\n        return value;\r\n    }\r\n    // Not a string or Color instance, it's the iRGB object then\r\n    return new Color(value);\r\n}\r\n/**\r\n * Checks if supplied argument is instance of [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Is Color?\r\n */\r\nexport function isColor(value) {\r\n    return value instanceof Color;\r\n}\r\n/**\r\n * Converts any value to [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Color\r\n */\r\nexport function castColor(value) {\r\n    return color(value);\r\n}\r\n/**\r\n * Converts any value into a [[Color]].\r\n *\r\n * @param value  Source value\r\n * @return Color object\r\n */\r\nexport function toColor(value) {\r\n    if ($type.hasValue(value) && !isColor(value)) {\r\n        return castColor(value);\r\n    }\r\n    return value;\r\n}\r\n//# sourceMappingURL=Color.js.map","/**\r\n * Kelly's colors is a set of 22 highly contrasting colors.\r\n *\r\n * More info:\r\n * {@link https://i.kinja-img.com/gawker-media/image/upload/1015680494325093012.JPG}\r\n * {@link https://eleanormaclure.files.wordpress.com/2011/03/colour-coding.pdf}\r\n */\r\nimport { is } from \"../core/utils/Type\";\r\nimport { color } from \"../core/utils/Color\";\r\nvar theme = function (object) {\r\n    if (is(object, \"ColorSet\")) {\r\n        object.list = [\r\n            color(\"#F3C300\"),\r\n            color(\"#875692\"),\r\n            color(\"#F38400\"),\r\n            color(\"#A1CAF1\"),\r\n            color(\"#BE0032\"),\r\n            color(\"#C2B280\"),\r\n            color(\"#848482\"),\r\n            color(\"#008856\"),\r\n            color(\"#E68FAC\"),\r\n            color(\"#0067A5\"),\r\n            color(\"#F99379\"),\r\n            color(\"#604E97\"),\r\n            color(\"#F6A600\"),\r\n            color(\"#B3446C\"),\r\n            color(\"#DCD300\"),\r\n            color(\"#882D17\"),\r\n            color(\"#8DB600\"),\r\n            color(\"#654522\"),\r\n            color(\"#E25822\"),\r\n            color(\"#2B3D26\"),\r\n            color(\"#F2F3F4\"),\r\n            color(\"#222222\")\r\n        ];\r\n        object.minLightness = 0.2;\r\n        object.maxLightness = 0.7;\r\n        object.reuse = true;\r\n    }\r\n};\r\nexport default theme;\r\n//# sourceMappingURL=kelly.js.map","export { default } from \"../.internal/themes/kelly\";\r\n//# sourceMappingURL=kelly.js.map","/**\r\n * A collection of color-related functions\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Define named colors for easy resolution to RGB.\r\n */\r\nvar namedColors = {\r\n    aliceblue: { r: 240, g: 248, b: 255 },\r\n    antiquewhite: { r: 250, g: 235, b: 215 },\r\n    aqua: { r: 0, g: 255, b: 255 },\r\n    aquamarine: { r: 127, g: 255, b: 212 },\r\n    azure: { r: 240, g: 255, b: 255 },\r\n    beige: { r: 245, g: 245, b: 220 },\r\n    bisque: { r: 255, g: 228, b: 196 },\r\n    black: { r: 0, g: 0, b: 0 },\r\n    blanchedalmond: { r: 255, g: 235, b: 205 },\r\n    blue: { r: 0, g: 0, b: 255 },\r\n    blueviolet: { r: 138, g: 43, b: 226 },\r\n    brown: { r: 165, g: 42, b: 42 },\r\n    burlywood: { r: 222, g: 184, b: 135 },\r\n    cadetblue: { r: 95, g: 158, b: 160 },\r\n    chartreuse: { r: 127, g: 255, b: 0 },\r\n    chocolate: { r: 210, g: 105, b: 30 },\r\n    coral: { r: 255, g: 127, b: 80 },\r\n    cornflowerblue: { r: 100, g: 149, b: 237 },\r\n    cornsilk: { r: 255, g: 248, b: 220 },\r\n    crimson: { r: 220, g: 20, b: 60 },\r\n    cyan: { r: 0, g: 255, b: 255 },\r\n    darkblue: { r: 0, g: 0, b: 139 },\r\n    darkcyan: { r: 0, g: 139, b: 139 },\r\n    darkgoldenrod: { r: 184, g: 134, b: 11 },\r\n    darkgray: { r: 169, g: 169, b: 169 },\r\n    darkgrey: { r: 169, g: 169, b: 169 },\r\n    darkgreen: { r: 0, g: 100, b: 0 },\r\n    darkkhaki: { r: 189, g: 183, b: 107 },\r\n    darkmagenta: { r: 139, g: 0, b: 139 },\r\n    darkolivegreen: { r: 85, g: 107, b: 47 },\r\n    darkorange: { r: 255, g: 140, b: 0 },\r\n    darkorchid: { r: 153, g: 50, b: 204 },\r\n    darkred: { r: 139, g: 0, b: 0 },\r\n    darksalmon: { r: 233, g: 150, b: 122 },\r\n    darkseagreen: { r: 143, g: 188, b: 143 },\r\n    darkslateblue: { r: 72, g: 61, b: 139 },\r\n    darkslategray: { r: 47, g: 79, b: 79 },\r\n    darkslategrey: { r: 47, g: 79, b: 79 },\r\n    darkturquoise: { r: 0, g: 206, b: 209 },\r\n    darkviolet: { r: 148, g: 0, b: 211 },\r\n    deeppink: { r: 255, g: 20, b: 147 },\r\n    deepskyblue: { r: 0, g: 191, b: 255 },\r\n    dimgray: { r: 105, g: 105, b: 105 },\r\n    dimgrey: { r: 105, g: 105, b: 105 },\r\n    dodgerblue: { r: 30, g: 144, b: 255 },\r\n    firebrick: { r: 178, g: 34, b: 34 },\r\n    floralwhite: { r: 255, g: 250, b: 240 },\r\n    forestgreen: { r: 34, g: 139, b: 34 },\r\n    fuchsia: { r: 255, g: 0, b: 255 },\r\n    gainsboro: { r: 220, g: 220, b: 220 },\r\n    ghostwhite: { r: 248, g: 248, b: 255 },\r\n    gold: { r: 255, g: 215, b: 0 },\r\n    goldenrod: { r: 218, g: 165, b: 32 },\r\n    gray: { r: 128, g: 128, b: 128 },\r\n    grey: { r: 128, g: 128, b: 128 },\r\n    green: { r: 0, g: 128, b: 0 },\r\n    greenyellow: { r: 173, g: 255, b: 47 },\r\n    honeydew: { r: 240, g: 255, b: 240 },\r\n    hotpink: { r: 255, g: 105, b: 180 },\r\n    indianred: { r: 205, g: 92, b: 92 },\r\n    indigo: { r: 75, g: 0, b: 130 },\r\n    ivory: { r: 255, g: 255, b: 240 },\r\n    khaki: { r: 240, g: 230, b: 140 },\r\n    lavender: { r: 230, g: 230, b: 250 },\r\n    lavenderblush: { r: 255, g: 240, b: 245 },\r\n    lawngreen: { r: 124, g: 252, b: 0 },\r\n    lemonchiffon: { r: 255, g: 250, b: 205 },\r\n    lightblue: { r: 173, g: 216, b: 230 },\r\n    lightcoral: { r: 240, g: 128, b: 128 },\r\n    lightcyan: { r: 224, g: 255, b: 255 },\r\n    lightgoldenrodyellow: { r: 250, g: 250, b: 210 },\r\n    lightgray: { r: 211, g: 211, b: 211 },\r\n    lightgrey: { r: 211, g: 211, b: 211 },\r\n    lightgreen: { r: 144, g: 238, b: 144 },\r\n    lightpink: { r: 255, g: 182, b: 193 },\r\n    lightsalmon: { r: 255, g: 160, b: 122 },\r\n    lightseagreen: { r: 32, g: 178, b: 170 },\r\n    lightskyblue: { r: 135, g: 206, b: 250 },\r\n    lightslategray: { r: 119, g: 136, b: 153 },\r\n    lightslategrey: { r: 119, g: 136, b: 153 },\r\n    lightsteelblue: { r: 176, g: 196, b: 222 },\r\n    lightyellow: { r: 255, g: 255, b: 224 },\r\n    lime: { r: 0, g: 255, b: 0 },\r\n    limegreen: { r: 50, g: 205, b: 50 },\r\n    linen: { r: 250, g: 240, b: 230 },\r\n    magenta: { r: 255, g: 0, b: 255 },\r\n    maroon: { r: 128, g: 0, b: 0 },\r\n    mediumaquamarine: { r: 102, g: 205, b: 170 },\r\n    mediumblue: { r: 0, g: 0, b: 205 },\r\n    mediumorchid: { r: 186, g: 85, b: 211 },\r\n    mediumpurple: { r: 147, g: 112, b: 219 },\r\n    mediumseagreen: { r: 60, g: 179, b: 113 },\r\n    mediumslateblue: { r: 123, g: 104, b: 238 },\r\n    mediumspringgreen: { r: 0, g: 250, b: 154 },\r\n    mediumturquoise: { r: 72, g: 209, b: 204 },\r\n    mediumvioletred: { r: 199, g: 21, b: 133 },\r\n    midnightblue: { r: 25, g: 25, b: 112 },\r\n    mintcream: { r: 245, g: 255, b: 250 },\r\n    mistyrose: { r: 255, g: 228, b: 225 },\r\n    moccasin: { r: 255, g: 228, b: 181 },\r\n    navajowhite: { r: 255, g: 222, b: 173 },\r\n    navy: { r: 0, g: 0, b: 128 },\r\n    oldlace: { r: 253, g: 245, b: 230 },\r\n    olive: { r: 128, g: 128, b: 0 },\r\n    olivedrab: { r: 107, g: 142, b: 35 },\r\n    orange: { r: 255, g: 165, b: 0 },\r\n    orangered: { r: 255, g: 69, b: 0 },\r\n    orchid: { r: 218, g: 112, b: 214 },\r\n    palegoldenrod: { r: 238, g: 232, b: 170 },\r\n    palegreen: { r: 152, g: 251, b: 152 },\r\n    paleturquoise: { r: 175, g: 238, b: 238 },\r\n    palevioletred: { r: 219, g: 112, b: 147 },\r\n    papayawhip: { r: 255, g: 239, b: 213 },\r\n    peachpuff: { r: 255, g: 218, b: 185 },\r\n    peru: { r: 205, g: 133, b: 63 },\r\n    pink: { r: 255, g: 192, b: 203 },\r\n    plum: { r: 221, g: 160, b: 221 },\r\n    powderblue: { r: 176, g: 224, b: 230 },\r\n    purple: { r: 128, g: 0, b: 128 },\r\n    rebeccapurple: { r: 102, g: 51, b: 153 },\r\n    red: { r: 255, g: 0, b: 0 },\r\n    rosybrown: { r: 188, g: 143, b: 143 },\r\n    royalblue: { r: 65, g: 105, b: 225 },\r\n    saddlebrown: { r: 139, g: 69, b: 19 },\r\n    salmon: { r: 250, g: 128, b: 114 },\r\n    sandybrown: { r: 244, g: 164, b: 96 },\r\n    seagreen: { r: 46, g: 139, b: 87 },\r\n    seashell: { r: 255, g: 245, b: 238 },\r\n    sienna: { r: 160, g: 82, b: 45 },\r\n    silver: { r: 192, g: 192, b: 192 },\r\n    skyblue: { r: 135, g: 206, b: 235 },\r\n    slateblue: { r: 106, g: 90, b: 205 },\r\n    slategray: { r: 112, g: 128, b: 144 },\r\n    slategrey: { r: 112, g: 128, b: 144 },\r\n    snow: { r: 255, g: 250, b: 250 },\r\n    springgreen: { r: 0, g: 255, b: 127 },\r\n    steelblue: { r: 70, g: 130, b: 180 },\r\n    tan: { r: 210, g: 180, b: 140 },\r\n    teal: { r: 0, g: 128, b: 128 },\r\n    thistle: { r: 216, g: 191, b: 216 },\r\n    tomato: { r: 255, g: 99, b: 71 },\r\n    turquoise: { r: 64, g: 224, b: 208 },\r\n    violet: { r: 238, g: 130, b: 238 },\r\n    wheat: { r: 245, g: 222, b: 179 },\r\n    white: { r: 255, g: 255, b: 255 },\r\n    whitesmoke: { r: 245, g: 245, b: 245 },\r\n    yellow: { r: 255, g: 255, b: 0 },\r\n    yellowgreen: { r: 154, g: 205, b: 50 }\r\n};\r\n/**\r\n * Tries to resolve a named color into a hex color representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Color name\r\n * @return Color\r\n * @deprecated\r\n * @hidden\r\n */\r\n/*export function resolveNamedColor(value: string): Color {\r\n    return (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;\r\n}*/\r\n/**\r\n * Converts a proper color hex code (i.e. \"#FF5500\") or named color (i.e. \"red\")\r\n * into an {iRGB} object. If the code is not correctly formatted, an RGB of\r\n * black is returned.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @param alpha  Alpha (0-1)\r\n * @return RGB\r\n */\r\nexport function rgb(color, alpha) {\r\n    // Init return value\r\n    var rgb;\r\n    // Try resolving color format\r\n    // Named color?\r\n    if (namedColors[color]) {\r\n        rgb = namedColors[color];\r\n    }\r\n    // Hex code?\r\n    else if (color.charAt(0) === \"#\") {\r\n        rgb = hexToRgb(color);\r\n    }\r\n    // rgb() format?\r\n    else if (color.match(/^rgba?\\(/)) {\r\n        rgb = rgbaToRgb(color);\r\n    }\r\n    // Was not able to resolve?\r\n    if (!rgb) {\r\n        rgb = { r: 0, g: 0, b: 0, a: 1 };\r\n    }\r\n    // Set alpha\r\n    if ($type.hasValue(alpha)) {\r\n        rgb.a = alpha;\r\n    }\r\n    return rgb;\r\n}\r\n/**\r\n * Converts a hex color code (i.e. \"#FF5500\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\r\nexport function hexToRgb(hex) {\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n        return r + r + g + g + b + b;\r\n    });\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n    } : undefined;\r\n}\r\n/**\r\n * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @return RGB\r\n */\r\nexport function rgbaToRgb(color) {\r\n    color = color.replace(/[ ]/g, \"\");\r\n    // Init\r\n    var matches = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);\r\n    // Try rgb() format\r\n    if (matches) {\r\n        matches.push(\"1\");\r\n    }\r\n    else {\r\n        matches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\r\n        if (!matches) {\r\n            return;\r\n        }\r\n    }\r\n    return {\r\n        r: parseInt(matches[1]),\r\n        g: parseInt(matches[2]),\r\n        b: parseInt(matches[3]),\r\n        a: parseFloat(matches[4])\r\n    };\r\n}\r\n/**\r\n * Converts an [[iRGB]] object into a hex color code.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return Hex color code\r\n */\r\nexport function rgbToHex(rgb) {\r\n    return \"#\" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));\r\n}\r\n/**\r\n * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return `rgba()` syntax\r\n */\r\nexport function rgbToRGBA(rgb) {\r\n    if ($type.hasValue(rgb.a) && rgb.a !== 1) {\r\n        return \"rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",\" + rgb.a + \")\";\r\n    }\r\n    else {\r\n        return \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \")\";\r\n    }\r\n}\r\n/**\r\n * Pads a 1-digit string with a zero.\r\n *\r\n * @ignore Exclude from docs\r\n * @param c  Input string\r\n * @return Padded string\r\n */\r\nexport function pad2(c) {\r\n    return c.length == 1 ? \"0\" + c : \"\" + c;\r\n}\r\n/**\r\n * Returns an intermediate color between two colors based on the relative\r\n * position. Position needs to be in range between 0 and 1. Zero meaning the\r\n * resulting color will be closest to the first reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color1   First reference color\r\n * @param color2   Second reference color\r\n * @param percent  Relative position (0-1)\r\n * @return Interpolated color\r\n */\r\nexport function interpolate(rgb1, rgb2, percent) {\r\n    percent = $math.fitToRange(percent, 0, 1);\r\n    if (rgb1) {\r\n        if (rgb2) {\r\n            return {\r\n                r: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),\r\n                g: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),\r\n                b: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),\r\n                a: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)\r\n            };\r\n        }\r\n        else {\r\n            return rgb1;\r\n        }\r\n    }\r\n    else if (rgb2) {\r\n        return rgb2;\r\n    }\r\n    else {\r\n        return rgb1;\r\n    }\r\n}\r\n/**\r\n * Returns a color that is `percent` brighter than the reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Reference color\r\n * @param percent  Brightness percent\r\n * @return Hex code of the new color\r\n */\r\nexport function lighten(rgb, percent) {\r\n    if (rgb) {\r\n        return {\r\n            r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),\r\n            g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),\r\n            b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),\r\n            a: rgb.a\r\n        };\r\n    }\r\n    else {\r\n        // TODO is this correct ?\r\n        return rgb;\r\n    }\r\n}\r\n;\r\n/**\r\n * Gets lightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getLightnessStep(value, percent) {\r\n    var base = percent > 0 ? 255 - value : value;\r\n    return Math.round(base * percent);\r\n}\r\n/**\r\n * Returns a color that is `percent` brighter than the source `color`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Source color\r\n * @param percent  Brightness percent\r\n * @return New color\r\n */\r\nexport function brighten(rgb, percent) {\r\n    if (rgb) {\r\n        var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);\r\n        //let base = Math.max(rgb.r, rgb.g, rgb.b);\r\n        var step = getLightnessStep(base, percent);\r\n        return {\r\n            r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),\r\n            g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),\r\n            b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),\r\n            a: rgb.a\r\n        };\r\n    }\r\n    else {\r\n        // TODO is this correct ?\r\n        return rgb;\r\n    }\r\n}\r\n;\r\n/**\r\n * Returns brightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getBrightnessStep(value, percent) {\r\n    var base = 255; //percent > 0 ? 255 - value : value;\r\n    return Math.round(base * percent);\r\n}\r\n/**\r\n * Returns a new [[iRGB]] object based on `rgb` parameter with specific\r\n * saturation applied.\r\n *\r\n * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n * saturated).\r\n *\r\n * @ignore Exclude from docs\r\n * @param color       Base color\r\n * @param saturation  Saturation (0-1)\r\n * @return New color\r\n */\r\nexport function saturate(rgb, saturation) {\r\n    if (rgb == null || saturation == 1) {\r\n        return rgb;\r\n    }\r\n    var hsl = rgbToHsl(rgb);\r\n    hsl.s = saturation;\r\n    return hslToRgb(hsl);\r\n}\r\n/*\r\n// not used\r\nexport function rgbToMatrix(rgb: iRGB): string {\r\n    let r = $type.toText($math.round((rgb.r || 0) / 255, 10));\r\n    let g = $type.toText($math.round((rgb.g || 0) / 255, 10));\r\n    let b = $type.toText($math.round((rgb.b || 0) / 255, 10));\r\n    let a = $type.toText(rgb.a || 1);\r\n    return\t      r + \" 0 0 0 0\" +\r\n                    \" 0 \" + g + \" 0 0 0\" +\r\n                    \" 0 0 \" + b + \" 0 0\" +\r\n                    \" 0 0 0 \" + a + \" 0\";\r\n}\r\n*/\r\n/**\r\n * The functions below are taken and adapted from Garry Tan's blog post:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * The further attributions go mjijackson.com, which now seems to be defunct.\r\n */\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param h       The hue\r\n * @param s       The saturation\r\n * @param l       The lightness\r\n * @return The RGB representation\r\n */\r\nexport function hslToRgb(color) {\r\n    var r, g, b;\r\n    var h = color.h;\r\n    var s = color.s;\r\n    var l = color.l;\r\n    if (s == 0) {\r\n        r = g = b = l; // achromatic\r\n    }\r\n    else {\r\n        var hue2rgb = function hue2rgb(p, q, t) {\r\n            if (t < 0) {\r\n                t += 1;\r\n            }\r\n            if (t > 1) {\r\n                t -= 1;\r\n            }\r\n            if (t < 1 / 6) {\r\n                return p + (q - p) * 6 * t;\r\n            }\r\n            if (t < 1 / 2) {\r\n                return q;\r\n            }\r\n            if (t < 2 / 3) {\r\n                return p + (q - p) * (2 / 3 - t) * 6;\r\n            }\r\n            return p;\r\n        };\r\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        var p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n    }\r\n    return {\r\n        r: Math.round(r * 255),\r\n        g: Math.round(g * 255),\r\n        b: Math.round(b * 255)\r\n    };\r\n}\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param r       The red color value\r\n * @param g       The green color value\r\n * @param b       The blue color value\r\n * @return The HSL representation\r\n */\r\nexport function rgbToHsl(color) {\r\n    var r = color.r / 255;\r\n    var g = color.g / 255;\r\n    var b = color.b / 255;\r\n    var max = Math.max(r, g, b);\r\n    var min = Math.min(r, g, b);\r\n    var h = 0;\r\n    var s = 0;\r\n    var l = (max + min) / 2;\r\n    if (max === min) {\r\n        h = s = 0; // achromatic\r\n    }\r\n    else {\r\n        var d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return {\r\n        h: h,\r\n        s: s,\r\n        l: l\r\n    };\r\n}\r\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\r\nexport function rgbToHsv(color) {\r\n    var r = color.r / 255;\r\n    var g = color.g / 255;\r\n    var b = color.b / 255;\r\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n    var h = 0;\r\n    var s = 0;\r\n    var v = max;\r\n    var d = max - min;\r\n    s = max == 0 ? 0 : d / max;\r\n    if (max == min) {\r\n        h = 0; // achromatic\r\n    }\r\n    else {\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return {\r\n        h: h,\r\n        s: s,\r\n        v: v\r\n    };\r\n}\r\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hsvToRgb(color) {\r\n    var r = 0;\r\n    var g = 0;\r\n    var b = 0;\r\n    var h = color.h;\r\n    var s = color.s;\r\n    var v = color.v;\r\n    var i = Math.floor(h * 6);\r\n    var f = h * 6 - i;\r\n    var p = v * (1 - s);\r\n    var q = v * (1 - f * s);\r\n    var t = v * (1 - (1 - f) * s);\r\n    switch (i % 6) {\r\n        case 0:\r\n            r = v;\r\n            g = t;\r\n            b = p;\r\n            break;\r\n        case 1:\r\n            r = q;\r\n            g = v;\r\n            b = p;\r\n            break;\r\n        case 2:\r\n            r = p;\r\n            g = v;\r\n            b = t;\r\n            break;\r\n        case 3:\r\n            r = p;\r\n            g = q;\r\n            b = v;\r\n            break;\r\n        case 4:\r\n            r = t;\r\n            g = p;\r\n            b = v;\r\n            break;\r\n        case 5:\r\n            r = v;\r\n            g = p;\r\n            b = q;\r\n            break;\r\n    }\r\n    return {\r\n        r: Math.round(r * 255),\r\n        g: Math.round(g * 255),\r\n        b: Math.round(b * 255)\r\n    };\r\n}\r\n/**\r\n * Returns `true` if color is \"light\". Useful indetermining which contrasting\r\n * color to use for elements over this color. E.g.: you would want to use\r\n * black text over light background, and vice versa.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Source color\r\n * @return Light?\r\n */\r\nexport function isLight(color) {\r\n    return ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;\r\n}\r\n//# sourceMappingURL=Colors.js.map"],"sourceRoot":""}